#!/usr/bin/env python
import argparse
import importlib
import os
import glob
import inspect
from ocdsdata.base import Source
from ocdsdata.database import  create_tables


def main():

    sources = gather_sources()

    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", help="increase output verbosity",
                    action="store_true")
    parser.add_argument("--run", help="run one source only")
    parser.add_argument("--runall", help="run all sources",
                    action="store_true")
    parser.add_argument("--basedir", help="base dir - defaults to current directory")
    parser.add_argument("--outputdir", help="output dir - defaults to id. Ignored if running more than one source.")

    parser.add_argument("--onlygather", help="only run the gather stage", action="store_true")
    parser.add_argument("--ignoregather", help="don't run the gather stage", action="store_true")
    parser.add_argument("--onlyfetch", help="only run the fetch stage", action="store_true")
    parser.add_argument("--ignorefetch", help="don't run the fetch stage", action="store_true")
    parser.add_argument("--onlyupload", help="only run the upload stage", action="store_true")
    parser.add_argument("--ignoreupload", help="don't run the upload stage", action="store_true")
    parser.add_argument("--createdatabase", help="Create Database", action="store_true")
    parser.add_argument("--dropandcreatedatabase", help="Drop and Recreate Database", action="store_true")
    parser.add_argument("--sample", help="Run sample only", action="store_true")

    args = parser.parse_args()

    if args.createdatabase:
        if args.verbose:
            print("Creating Database")
        create_tables(False)
    elif args.dropandcreatedatabase:
        if args.verbose:
            print("Dropping and Recreating Database")
        create_tables(True)

    run = []

    if args.runall:
        for source_id, source_class in sources.items():
            run.append({'id': source_id, 'source_class': source_class})
    elif args.run:
        if args.run in sources:
            run.append({'id': args.run, 'source_class': sources[args.run]})
        else:
            print("We can not find a source that you requested! You requested: %s" % [args.run])
            quit(-1)

    if not run:
        print("You have not specified anything to run! Try --run=??? or --runall")
        print("You can run:")
        for source_id, source_info in sorted(sources.items()):
            print(" - %s" % source_id)
        quit(-1)


    base_dir = args.basedir or os.getcwd()
    remove_dir = False
    sample_mode = args.sample

    if args.verbose:
        print("We will run: ")
        for sourceInfo in run:
            print(" - %s" % sourceInfo['id'])
        if sample_mode:
            print("Sample mode is on!")
        else:
            print("Sample mode is off.")

    run_gather = True
    run_fetch = True
    run_upload = True
    if args.onlygather:
        run_fetch = False
        run_upload = False
    elif args.onlyfetch:
        run_gather = False
        run_upload = False
    elif args.onlyupload:
        run_gather = False
        run_fetch = False
    else:
        if args.ignoregather:
            run_gather = False
        if args.ignorefetch:
            run_fetch = False
        if args.ignoreupload:
            run_upload = False

    for source_info in run:
        output_directory = source_info['id']
        if len(run) == 1 and args.outputdir:
            output_directory = args.outputdir

        instance = source_info['source_class'](base_dir, remove_dir=remove_dir, output_directory=output_directory,
                                                   sample=sample_mode)
        if args.verbose:
            print("Now running: %s (Output Dir: %s)" % (source_info['id'], instance.output_directory))

        if run_gather:
            if args.verbose:
                print(" - gathering ...")
            instance.run_gather()
        else:
            if args.verbose:
                print(" - skipping gather.")
        if run_fetch:
            if args.verbose:
                print(" - fetching ...")
            instance.run_fetch()
        else:
            if args.verbose:
                print(" - skipping fetch.")
        if run_upload:
            if args.verbose:
                print(" - uploading ...")
            instance.run_upload()
        else:
            if args.verbose:
                print(" - skipping upload.")


def gather_sources():
    sources = {}

    dir_path = os.path.dirname(os.path.realpath(__file__))
    sources_dir = os.path.join(dir_path, 'ocdsdata', 'sources')
    for file in glob.glob(sources_dir + '/*.py'):
        module = importlib.import_module('ocdsdata.sources.' + file.split('/')[-1].split('.')[0])
        for item in dir(module):
            value = getattr(module, item)
            if inspect.isclass(value) and issubclass(value, Source) and value is not Source:
                sources[getattr(value, 'source_id')] = value
    return sources

if __name__ == '__main__':
    main()
